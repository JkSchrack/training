---NOTES---

Queue = (FIFO)First in First Out
Stack = (LIFO)Last In First Out
Header File: Used to declare classes, definitions and functions

4-Pillars of OOP
  Encapsulation limits external use; Public/Private Variables & Methods
  Abstraction extension of Encapsulation, hides details and only shows a High-Level mechanism
  Inheritance shares common logic; Attributes
  Polymorphism means to process objects differently based on their data type

C++ Program Structure -> https://www.cplusplus.com/doc/tutorial/program_structure/
  # are directives read and interpreted by what is known as the preprocessor
  Interpreted before the compilation of the program itself begins
  Instructs the preprocessor to include a section of standard C++ code, known as header
  Statement: An expression that can actually produce some effect
  std: Abbreviation of Standard
    Using namespace std: Uses the std namespace so that std:: doesn't need to prefix everything
    Can create naming conflicts that may result in compilation errors or wrong function calls
    Ex. Cout function is defined in a custom namespace in addition to std
  Namespace: Declarative region that provides scope to identifiers (Name Types, Functions, Variables, etc...)
 
 Data Magnitudes -> https://wiki.ubuntu.com/UnitsPolicy
  Bit(b): 0 or 1
  Nibble: 4 bits
  Byte(B): 8 bits
  Decimal: Uses base-10 International System of Units (SI) standard
    kilobyte(kB): 1000 bytes
    megabyte(MB): 1000^2 bytes
    gigabyte(GB): 1000^3 bytes
  Binary: Uses base-2 International Electrotechnical Commission (IEC 600027) standard
    kilobyte(KB)/kibibyte(KiB): 1024 bytes
    megabyte(MB)/mebibyte(MiB): 1024^2 bytes
    gigabyte(GB)/gibibyte(GiB): 1024^3 bytes
 
 Pointers -> https://www.cplusplus.com/doc/tutorial/pointers/
  Pointer: Variable that stores the address of another variable
  Address-of Operator(&): Obtains address of a variable
  Dereference Operator(*): Obtains value of a pointer
    Ex. variable = 7, pointer = &variable == 0xffffcbc0 (Memory Address), *pointer == 7
 
 Pass By Value vs Reference
  Pass by Value: Caller and callee have two independent variables with the same value
    Ex. Caller: passByVal(val), Callee: passByVal(type val) {...}
    Pass by Reference: Caller and the callee use the same variable for the parameter
      Ex. Caller: passByRef(&val), Callee: passByRef(type &val) {...}
    Derivatives by Pass by Reference:
      Ex. Caller: passPtr(ptrName), Callee: passPtr(type *ptrName) {...}
      Ex. Caller: passRef(refName), Callee: passRef(type &refName) {...}
      Ex. Caller: passPtrArg(&varName), Callee: passPtrArg(type *ptrName) {...}
  Ex. Caller: passByPtr(*val), Callee: passByRef(type *val) {...}
 
Deep vs Shallow Copy
  Deep Copy:
  Shallow Copy:
 
  Trees
    Tree: All nodes originate from a single Root Node and each Child Node has ONLY 1 Parent Node
      General Tree (Tree): No limit of Children per Parent Node
      Binary Tree: At most 2 Children per Parent Node
      Binary Search Tree: Node Values are Left <= Parent <= Right
      Full/Proper Binary Tree (2-Tree): Every Parent has 2 Children
      Perfect Binary Tree: Every Parent has exactly 2 Children
      Complete Binary Tree/Heap/Array: Only last level may be incompletely filled and then prioritized left to right
        Min-Heap Order Property: Root = Min Value and Children Value <= Parent
        Max-Heap Order Property: Root = Max Value and Children Value >= Parent
      Balanced Binary Tree: Tree height is O(log(n)) for N = Number of Nodes
        Height of left and right subtrees for each node varies at most +/- 1
        AVL Tree: Self Balancing Binary Search Tree
        Each node stores Balance Factor: -1 = Only Right Child, 0 = Either 2 or No Children, 1 = Only Left Child
 
 Logarithm: Power of B to equal A; Ie: logb(a) = c == b^c = a
  Ex. Log 8 for base 2 is 3 since 2^3 = 8
 
 Big O Notation -> https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/
  Big O Notation: Characterizes functions according to growth rates describes the performance or complexity of an algorithm
  https://www.freecodecamp.org/news/big-o-notation-why-it-matters-and-why-it-doesnt-1674cfa8a23c/
    O (Big O): Upper Bound
    Ω (Omega): Lower Bound
    Θ (Theta): Exact Bound
    o (Lil O): Upper Bound excluding Exact Bound
  Time Complexity: Execution time for n inputs
  Space Complexity: Amount of memory/space needed for n inputs
    O(1) 'Constant': Same amount of executions regardless n number of inputs
      Ex. First element of an Array
    O(log(n)) 'Logarithmic': Execution increases linearly while n increases exponentially
      Ex. Divide and conquer algorithms like Binary Search
    O(n) 'Linear': Performance is directly proportional to the size of the input data set
      Ex. For 0 to n
    O(nlog(n)) = O(log(n!) 'Linearithmic'/'Loglinear': Doing log(n) n number of times
      Ex. Ideal Quick Sort log(n) partitions at n visits per level log(n) * n = nlog(n)
    O(n^2) 'Quadratic': Performance is directly proportional to the square size of the input data set
      Ex. Nested For 0 to n
    O(2^n) 'Exponential': Growth doubles with each additional element in an input data set
      Ex. Recursively find the nth number in the fibonacci sequence
    O(n!) 'Factorial':
      Ex. Find all permutations (Order Matters)

 
 DHCP: Dynamic Host Configuration Protocol: Assigns IP addresses to Devices
  Configure dhcpd daemon on each switch
  Edit dhcpd.conf file
  dhcpd.service is listening on NetDev1 bridge interface & NetDev2 Interface
 
 DNS: Domain Name Service: Maps Names to IP's
  Configure Authoritative Name Server nsd -> nsd.conf
  Provides authoritative address resolutions for intnet1.2620.acit domain
 
Configure Caching Recursive Name Server Configuration unbound -> unbound.conf & dhcpd.conf
  Resolve DNS requests originating from 10.0.100.0/24 network
  Using nmtui/nmcli
